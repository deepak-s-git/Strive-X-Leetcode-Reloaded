/*
Problem: Merge Two Binary Trees (LeetCode #617)
----------------------------------------------
You are given the roots of two binary trees `t1` and `t2`.

- Merge them into a single tree by **adding the values** of overlapping nodes.
- If a node exists in only one tree, use that node directly.

Example:
--------
Input: 
   Tree 1:        1            Tree 2:        2
                 / \                         / \
                3   2                       1   3
               /                             \   \
              5                               4   7

Output (Merged Tree):
                     3
                   /   \
                  4     5
                 / \     \
                5   4     7

Constraints:
------------
- The number of nodes in both trees is in the range [0, 2000].
- -10‚Å¥ <= Node.val <= 10‚Å¥
*/


// -----------------------------------------------------------------------------
// ‚úÖ Recursive DFS Approach (Top-Down)
// -----------------------------------------------------------------------------
// üî• Intuition:
// - Traverse both trees simultaneously.
// - If both nodes exist ‚Üí sum values.
// - If one node is NULL ‚Üí use the other as it is.
//
// ‚öôÔ∏è Steps:
// 1. If `t1` is NULL ‚Üí return `t2`.
// 2. If `t2` is NULL ‚Üí return `t1`.
// 3. Update `t1->val` += `t2->val`.
// 4. Recursively merge left and right children.
//
// ‚è±Ô∏è Time Complexity: O(N) ‚Äì visits each node once  
// üì¶ Space Complexity: O(H) ‚Äì recursion depth (H = height of tree)
// -----------------------------------------------------------------------------

class Solution {
public:
    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {
        // ü™µ Base cases
        if (!t1) return t2;   // If t1 is empty ‚Üí use t2
        if (!t2) return t1;   // If t2 is empty ‚Üí use t1

        // ‚ûï Merge node values
        t1->val += t2->val;

        // üîÅ Recurse for left & right children
        t1->left = mergeTrees(t1->left, t2->left);
        t1->right = mergeTrees(t1->right, t2->right);

        return t1; // ‚úÖ Return merged tree
    }
};
